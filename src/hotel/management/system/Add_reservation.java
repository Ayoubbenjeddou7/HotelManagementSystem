package hotel.management.system;

import dao.ConnectionProvider;
import javax.swing.JOptionPane;
import java.sql.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ListSelectionModel;
import javax.swing.table.DefaultTableModel;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
/**
 *
 * @author Toshiba
 */
public class Add_reservation extends javax.swing.JFrame {

    /**
     * Creates new form ManageRoom
     */
    public Add_reservation() {
        initComponents();
        setLocationRelativeTo(null);
        init_IDClients();
        init_Rooms();
        update_clients();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    private void init_IDClients() {
        try {
            Connection con = ConnectionProvider.getCon();
            Statement st = con.createStatement();
            ResultSet rs = st.executeQuery("SELECT id_client FROM client");

            cmbIDClient.removeAllItems(); // Clear existing items
            cmbIDClient.addItem("            -- Select Client --"); // Default item

            while (rs.next()) {
                cmbIDClient.addItem(rs.getString("id_client"));
            }

            con.close();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error loading clients: " + e.getMessage());
        }
    }

    public void update_clients() {
        try {
            Connection con = ConnectionProvider.getCon();
            Statement st = con.createStatement();
            ResultSet rs = st.executeQuery("select * from client");
            DefaultTableModel model = (DefaultTableModel) jTable3.getModel();
            model.setRowCount(0);
            while (rs.next()) {
                model.addRow(new Object[]{rs.getString(1), rs.getString(2), rs.getString(3), rs.getString(4), rs.getString(5)});
            }
            rs.close();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }
    }

    private void init_Rooms() {
        try {
            Connection con = ConnectionProvider.getCon();
            Statement st = con.createStatement();
            ResultSet rs = st.executeQuery("SELECT id_chambre FROM chambre where status_ !='En Rénovation'");

            cmbChambre.removeAllItems(); // Clear existing items
            cmbChambre.addItem("-- Select Room --"); // Default item

            while (rs.next()) {
                cmbChambre.addItem(rs.getString("id_chambre"));
            }

            con.close();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error loading rooms: " + e.getMessage());
        }
    }
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton8 = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        cmbIDClient = new javax.swing.JComboBox<>();
        txtDF = new javax.swing.JTextField();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable3 = new javax.swing.JTable();
        close = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        maximize = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        minimize = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        nb_pers = new javax.swing.JSpinner();
        txtDD = new javax.swing.JTextField();
        jScrollPane5 = new javax.swing.JScrollPane();
        chambres = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        cmbChambre = new javax.swing.JComboBox<>();
        jButton9 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setUndecorated(true);
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });

        jButton8.setText("afficher les chambres disponibles");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });

        jLabel5.setText("nombre de personnes :");

        jLabel4.setText("Date_FIn");

        cmbIDClient.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "--------------Select Client----------" }));
        cmbIDClient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbIDClientActionPerformed(evt);
            }
        });

        jTable3.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "ID", "Nom", "Prénom", "Email", "Téléphone"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable3MouseClicked(evt);
            }
        });
        jTable3.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                jTable3ComponentShown(evt);
            }
        });
        jScrollPane3.setViewportView(jTable3);

        close.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/close.png"))); // NOI18N
        close.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                closeMouseClicked(evt);
            }
        });

        jLabel1.setText("Chambre");

        maximize.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/maximize.png"))); // NOI18N
        maximize.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                maximizeMouseClicked(evt);
            }
        });

        jLabel2.setText("ID_Client");

        minimize.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/minimize.png"))); // NOI18N
        minimize.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                minimizeMouseClicked(evt);
            }
        });

        jLabel3.setText("Date_Début");

        chambres.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID chambre", "capacité", "prix"
            }
        ));
        chambres.setColumnSelectionAllowed(true);
        chambres.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                chambresMouseClicked(evt);
            }
        });
        jScrollPane5.setViewportView(chambres);

        jButton1.setText("Add");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton9.setText("consulter la table Reservation");
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(86, 86, 86)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 234, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4))
                        .addGap(12, 12, 12)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtDD, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtDF, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(67, 67, 67)
                                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton9)
                        .addGap(76, 76, 76))))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(693, 693, 693)
                        .addComponent(minimize)
                        .addGap(6, 6, 6)
                        .addComponent(maximize)
                        .addGap(6, 6, 6)
                        .addComponent(close))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 394, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(layout.createSequentialGroup()
                            .addGap(92, 92, 92)
                            .addComponent(jButton8)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel1)
                            .addGap(24, 24, 24)
                            .addComponent(cmbChambre, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                            .addGap(86, 86, 86)
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addComponent(nb_pers, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(115, 115, 115)
                            .addComponent(jLabel2)
                            .addGap(28, 28, 28)
                            .addComponent(cmbIDClient, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(minimize)
                    .addComponent(maximize)
                    .addComponent(close))
                .addGap(35, 35, 35)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton8, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(9, 9, 9)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(9, 9, 9)
                                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addComponent(nb_pers, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(3, 3, 3)
                                .addComponent(jLabel2))
                            .addComponent(cmbIDClient, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addComponent(jLabel3)
                                .addGap(47, 47, 47)
                                .addComponent(jLabel4))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(3, 3, 3)
                                .addComponent(txtDD, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(41, 41, 41)
                                .addComponent(txtDF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(29, 29, 29)
                                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(50, 50, 50)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(cmbChambre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(99, 99, 99)
                        .addComponent(jButton9, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(27, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    private void clearForm() {
        cmbChambre.setSelectedItem("");
        cmbIDClient.setSelectedItem("");
        txtDD.setText("");
        txtDF.setText("");
    }

    private boolean isRoomEnough(int idChambre, int value) {
    Connection conn = null;
    PreparedStatement pst = null;
    ResultSet rs = null;
    boolean isEnough = false;
    
    try {
        // 1. Get database connection
        conn = ConnectionProvider.getCon();
        
        // 2. Prepare SQL query to get room capacity
        String query = "SELECT CAPACITE FROM chambre WHERE ID_CHAMBRE = ?";
        pst = conn.prepareStatement(query);
        pst.setInt(1, idChambre);
        
        // 3. Execute query
        rs = pst.executeQuery();
        
            // 4. Check if room exists and has enough capacity
        if (rs.next()) {
            int roomCapacity = rs.getInt("CAPACITE");
            isEnough = (roomCapacity >= value);
        }
        
    } catch (SQLException e) {
        e.printStackTrace();
        // Consider returning false or throwing exception if DB error occurs
    } finally {
        // 5. Close resources
        try {
            if (rs != null) rs.close();
            if (pst != null) pst.close();
            if (conn != null) conn.close();
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
    }
    
    return isEnough;
}

    private boolean isRoomAvailable(int idChambre, String dateDebut, String dateFin) {
        boolean available = true;
        Connection conn = null;
        PreparedStatement pst = null;
        ResultSet rs = null;

        try {
            // Establish database connection
            conn = ConnectionProvider.getCon();
            // SQL query to check if the room is booked during the given period
            String query = "SELECT 1 FROM reservation WHERE ID_CHAMBRE = ? "
                    + "AND ((DATE_DEBUT <= ? AND DATE_FIN >= ?) " // Overlap condition 1
                    + "OR (DATE_DEBUT >= ? AND DATE_DEBUT <= ?) " // Overlap condition 2
                    + "OR (DATE_FIN >= ? AND DATE_FIN <= ?))";     // Overlap condition 3

            pst = conn.prepareStatement(query);
            pst.setInt(1, idChambre);
            pst.setDate(2, Date.valueOf(dateFin));     // First condition end date
            pst.setDate(3, Date.valueOf(dateDebut));  // First condition start date
            pst.setDate(4, Date.valueOf(dateDebut));  // Second condition start date
            pst.setDate(5, Date.valueOf(dateFin));    // Second condition end date
            pst.setDate(6, Date.valueOf(dateDebut));  // Third condition start date
            pst.setDate(7, Date.valueOf(dateFin));    // Third condition end date

            rs = pst.executeQuery();

            // If the query returns a result, the room is not available
            if (rs.next()) {
                available = false;
            }

        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            // Close resources
            try {
                if (rs != null) {
                    rs.close();
                }
                if (pst != null) {
                    pst.close();
                }
                if (conn != null) {
                    conn.close();
                }
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
        }

        return available;
    }


    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
        // TODO add your handling code here:
        /* try {
            Connection con = ConnectionProvider.getCon();
            Statement st = con.createStatement();
            ResultSet rs = st.executeQuery("select * from chambre");
            DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
            model.setRowCount(0);
            while (rs.next()) {
                model.addRow(new Object[]{rs.getString(1), rs.getString(2), rs.getString(3), rs.getString(4), rs.getString(5)});
            }
            rs.close();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }*/
    }//GEN-LAST:event_formComponentShown

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed

        try {
            Connection con = ConnectionProvider.getCon();
            PreparedStatement pst = con.prepareStatement("Select id_chambre , capacite,prix from chambre where capacite >= ? and status_!='En Rénovation' ");
            pst.setString(1,nb_pers.getValue().toString());
            ResultSet rst = pst.executeQuery();
            cmbChambre.removeAllItems();
            cmbChambre.addItem("-- Select Room --");
            // Récupération des colonnes
            ResultSetMetaData metaData = rst.getMetaData();
            int columnCount = metaData.getColumnCount();
            DefaultTableModel model = (DefaultTableModel) chambres.getModel();
            model.setRowCount(0);
            int rowcount=0;
            // Ajouter les lignes de données
            while (rst.next()) {
                Object[] rowData = new Object[columnCount];
                for (int i = 1; i <= columnCount; i++) {
                    rowData[i - 1] = rst.getObject(i);
                }
                cmbChambre.addItem(rst.getString("id_chambre"));
            

                model.addRow(rowData);
                rowcount++;
            }
            if(rowcount == 0){
                JOptionPane.showMessageDialog(this,"Pas de chambres diponible de cette capacité");
            }

        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Erresur de connexion à la base de données !");
        }
    }//GEN-LAST:event_jButton8ActionPerformed

    private void jTable3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable3MouseClicked
        // TODO add your handling code here:
        DefaultTableModel model = (DefaultTableModel) jTable3.getModel();
        String IDClient = model.getValueAt(jTable3.getSelectedRow(), 0).toString();
        cmbIDClient.setSelectedItem(IDClient);
    }//GEN-LAST:event_jTable3MouseClicked

    private void jTable3ComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_jTable3ComponentShown
        // TODO add your handling code here:
    }//GEN-LAST:event_jTable3ComponentShown

    private void closeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_closeMouseClicked
        // TODO add your handling code here:
        int confirm = JOptionPane.showConfirmDialog(
            null,
            "Are you sure you want to close this window?", null,
            JOptionPane.YES_NO_OPTION // Fixed typo: OPTION (was OPTION)
        );
        if (confirm == JOptionPane.YES_OPTION) {
            this.dispose();
        }
    }//GEN-LAST:event_closeMouseClicked

    private void maximizeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_maximizeMouseClicked
        // TODO add your handling code here:
        if (this.getExtendedState() == this.MAXIMIZED_BOTH) {
            // If currently maximized, restore to normal
            this.setExtendedState(this.NORMAL);
        } else {
            // If not maximized, maximize the window
            this.setExtendedState(this.MAXIMIZED_BOTH);
        }
    }//GEN-LAST:event_maximizeMouseClicked

    private void minimizeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_minimizeMouseClicked
        // TODO add your handling code here:
        this.setState(this.ICONIFIED);
    }//GEN-LAST:event_minimizeMouseClicked

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        // Get input values
        try {
            // Validate client selection
            if (cmbIDClient.getSelectedItem() == null || cmbIDClient.getSelectedItem().toString().isEmpty()) {
                JOptionPane.showMessageDialog(this, "Veuillez sélectionner un client", "Erreur", JOptionPane.WARNING_MESSAGE);
                return;
            }

            // Validate room selection
            if (cmbChambre.getSelectedItem() == null || cmbChambre.getSelectedItem().toString().isEmpty()) {
                JOptionPane.showMessageDialog(this, "Veuillez sélectionner une chambre", "Erreur", JOptionPane.WARNING_MESSAGE);
                return;
            }

            // Get client ID from the text field (already populated when client was selected)
            int clientId = Integer.parseInt(cmbIDClient.getSelectedItem().toString());

            // Get room ID - we need to get it from the database based on the selected description
            int roomId = Integer.parseInt(cmbChambre.getSelectedItem().toString());
            if (roomId == -1) {
                JOptionPane.showMessageDialog(this, "Chambre invalide", "Erreur", JOptionPane.ERROR_MESSAGE);
                return;
            }

            String checkInStr, checkOutStr;
            Date checkIn = null, checkOut = null;

            try {
                checkInStr = txtDD.getText();
                checkOutStr = txtDF.getText();

                // Convert String to Date object for validation
                checkIn = Date.valueOf(checkInStr);
                checkOut = Date.valueOf(checkOutStr);

                // Check if end date is after start date
                if (!checkOut.after(checkIn)) {
                    JOptionPane.showMessageDialog(this, "La date de fin doit être après la date de début",
                        "Erreur de dates", JOptionPane.WARNING_MESSAGE);
                    return;
                }

                // Check if dates are in the future
                Date today = new Date(System.currentTimeMillis());
                if (!checkIn.after(today)) {
                    JOptionPane.showMessageDialog(this, "La date de début doit être dans le futur",
                        "Erreur de date", JOptionPane.WARNING_MESSAGE);
                    return;
                }

                // Get room ID
                int idChambre = Integer.parseInt(cmbChambre.getSelectedItem().toString());
                
                

                // Check room availability
                if (isRoomAvailable(idChambre, checkInStr, checkOutStr)) {
                    JOptionPane.showMessageDialog(this, "La chambre est disponible !", "Disponibilité", JOptionPane.INFORMATION_MESSAGE);
                } else {
                    JOptionPane.showMessageDialog(this, "La chambre est déjà réservée pour cette période.",
                        "Indisponible", JOptionPane.WARNING_MESSAGE);
                    return;
                }

            } catch (IllegalArgumentException e) {
                JOptionPane.showMessageDialog(this, "Format de date invalide (utilisez AAAA-MM-JJ)",
                    "Erreur de format", JOptionPane.WARNING_MESSAGE);
            }

            // Insert reservation
            try (Connection con = ConnectionProvider.getCon(); PreparedStatement ps = con.prepareStatement(
                "INSERT INTO reservation (id_client, id_chambre, date_debut, date_fin) VALUES (?, ?, ?, ?)")) {

            ps.setInt(1, clientId);
            ps.setInt(2, roomId);
            ps.setDate(3, checkIn);
            ps.setDate(4, checkOut);

            int rows = ps.executeUpdate();
            if (rows > 0) {
                JOptionPane.showMessageDialog(this, "Réservation ajoutée avec succès",
                    "Succès", JOptionPane.INFORMATION_MESSAGE);
                
                clearForm();
            }
        }
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "ID client invalide", "Erreur", JOptionPane.ERROR_MESSAGE);
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Erreur de base de données: " + e.getMessage(),
                "Erreur SQL", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Erreur inattendue: " + e.getMessage(),
                "Erreur", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
        new Consulter_Reservation().setVisible(true);
    }//GEN-LAST:event_jButton9ActionPerformed

    private void chambresMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_chambresMouseClicked
        DefaultTableModel model = (DefaultTableModel) chambres.getModel();
        String IDClient = model.getValueAt(chambres.getSelectedRow(), 0).toString();
        cmbChambre.setSelectedItem(IDClient);
    }//GEN-LAST:event_chambresMouseClicked

    private void cmbIDClientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbIDClientActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbIDClientActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Add_reservation.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Add_reservation.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Add_reservation.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Add_reservation.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Add_reservation().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable chambres;
    private javax.swing.JLabel close;
    private javax.swing.JComboBox<String> cmbChambre;
    private javax.swing.JComboBox<String> cmbIDClient;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JTable jTable3;
    private javax.swing.JLabel maximize;
    private javax.swing.JLabel minimize;
    private javax.swing.JSpinner nb_pers;
    private javax.swing.JTextField txtDD;
    private javax.swing.JTextField txtDF;
    // End of variables declaration//GEN-END:variables
}
