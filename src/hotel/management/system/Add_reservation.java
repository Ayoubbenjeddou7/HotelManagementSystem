package hotel.management.system;

import dao.ConnectionProvider;
import javax.swing.JOptionPane;
import java.sql.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JSpinner;
import javax.swing.ListSelectionModel;
import javax.swing.table.DefaultTableModel;
import oracle.jdbc.OracleTypes;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
/**
 *
 * @author Toshiba
 */
public class Add_reservation extends javax.swing.JFrame {

    /**
     * Creates new form ManageRoom
     */
    public Add_reservation() {
        initComponents();
        JSpinner.DefaultEditor editor = (JSpinner.DefaultEditor) nb_pers.getEditor();
        editor.getTextField().setEditable(false);
        editor.getTextField().setFocusable(false);

        setLocationRelativeTo(null);
        init_IDClients();
        init_Rooms();
        update_clients();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    private void init_IDClients() {
        try {
            Connection con = ConnectionProvider.getCon();
            Statement st = con.createStatement();
            ResultSet rs = st.executeQuery("SELECT id_client FROM client");

            cmbIDClient.removeAllItems(); // Clear existing items
            cmbIDClient.addItem("            -- Select Client --"); // Default item

            while (rs.next()) {
                cmbIDClient.addItem(rs.getString("id_client"));
            }

            con.close();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error loading clients: " + e.getMessage());
        }
    }

    public void update_clients() {
        try {
            Connection con = ConnectionProvider.getCon();
            Statement st = con.createStatement();
            ResultSet rs = st.executeQuery("select * from client");
            DefaultTableModel model = (DefaultTableModel) jTable3.getModel();
            model.setRowCount(0);
            while (rs.next()) {
                model.addRow(new Object[]{rs.getString(1), rs.getString(2), rs.getString(3), rs.getString(4), rs.getString(5)});
            }
            con.close();
            rs.close();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }
    }

    private void init_Rooms() {
        try {
            Connection con = ConnectionProvider.getCon();
            Statement st = con.createStatement();
            ResultSet rs = st.executeQuery("SELECT id_chambre FROM chambre where status !='En Rénovation'");

            cmbChambre.removeAllItems(); // Clear existing items
            cmbChambre.addItem("-- Select Room --"); // Default item

            while (rs.next()) {
                cmbChambre.addItem(rs.getString("id_chambre"));
            }
            rs.close();
            con.close();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error loading rooms: " + e.getMessage());
        }
    }
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable3 = new javax.swing.JTable();
        jLabel6 = new javax.swing.JLabel();
        jButton9 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jButton8 = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        nb_pers = new javax.swing.JSpinner();
        jScrollPane5 = new javax.swing.JScrollPane();
        chambres = new javax.swing.JTable();
        txtDD1 = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        txtDF1 = new javax.swing.JTextField();
        jPanel3 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        txtDF = new javax.swing.JTextField();
        txtDD = new javax.swing.JTextField();
        cmbIDClient = new javax.swing.JComboBox<>();
        cmbChambre = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Hotel Management System - dd Reservation");
        setResizable(false);
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });

        jPanel2.setBackground(new java.awt.Color(241, 211, 134));

        jTable3.setBackground(new java.awt.Color(0, 51, 102));
        jTable3.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jTable3.setForeground(new java.awt.Color(255, 255, 255));
        jTable3.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "ID", "Nom", "Prénom", "Email", "Téléphone"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable3.setGridColor(new java.awt.Color(0, 51, 102));
        jTable3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable3MouseClicked(evt);
            }
        });
        jTable3.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                jTable3ComponentShown(evt);
            }
        });
        jScrollPane3.setViewportView(jTable3);

        jLabel6.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel6.setText("Informations Des Clients");

        jButton9.setBackground(new java.awt.Color(0, 51, 102));
        jButton9.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jButton9.setForeground(new java.awt.Color(255, 255, 255));
        jButton9.setText("consulter la table Reservation");
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(241, 211, 134));
        jPanel1.setBorder(javax.swing.BorderFactory.createMatteBorder(2, 2, 2, 2, new java.awt.Color(0, 0, 0)));

        jButton8.setBackground(new java.awt.Color(0, 51, 102));
        jButton8.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jButton8.setForeground(new java.awt.Color(255, 255, 255));
        jButton8.setText("afficher les chambres disponibles");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel5.setText("nombre de personnes :");

        nb_pers.setModel(new javax.swing.SpinnerNumberModel(0, 0, null, 1));
        nb_pers.setToolTipText("");

        chambres.setBackground(new java.awt.Color(0, 51, 102));
        chambres.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        chambres.setForeground(new java.awt.Color(255, 255, 255));
        chambres.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID chambre", "capacité", "prix"
            }
        ));
        chambres.setColumnSelectionAllowed(true);
        chambres.setGridColor(new java.awt.Color(0, 51, 102));
        chambres.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                chambresMouseClicked(evt);
            }
        });
        jScrollPane5.setViewportView(chambres);

        jLabel7.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel7.setText("Date_Début");

        jLabel8.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel8.setText("Date_FIn");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 368, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jButton8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(nb_pers, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel7)
                                    .addComponent(jLabel8))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(txtDF1, javax.swing.GroupLayout.DEFAULT_SIZE, 151, Short.MAX_VALUE)
                                    .addComponent(txtDD1))))))
                .addContainerGap(24, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nb_pers, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel7)
                    .addComponent(txtDD1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(txtDF1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton8, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jPanel3.setBackground(new java.awt.Color(241, 211, 134));
        jPanel3.setBorder(javax.swing.BorderFactory.createMatteBorder(2, 2, 2, 2, new java.awt.Color(0, 0, 0)));

        jButton1.setBackground(new java.awt.Color(0, 51, 102));
        jButton1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jButton1.setForeground(new java.awt.Color(255, 255, 255));
        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/addicon2.png"))); // NOI18N
        jButton1.setText("     Add         ");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        cmbIDClient.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "--------Select Client-----" }));
        cmbIDClient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbIDClientActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel1.setText("Chambre");

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel2.setText("ID_Client");

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel3.setText("Date_Début");

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel4.setText("Date_FIn");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jLabel2)
                        .addComponent(jLabel1))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(jLabel3))))
                .addGap(33, 33, 33)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(cmbChambre, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(cmbIDClient, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txtDD)
                    .addComponent(txtDF))
                .addContainerGap(35, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(cmbChambre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(cmbIDClient, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(jLabel3))
                    .addComponent(txtDD, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(txtDF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(85, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 756, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(265, 265, 265)
                                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 221, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(230, 230, 230)
                                .addComponent(jButton9)))))
                .addGap(0, 10, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel6)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 269, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(jButton9)
                .addGap(26, 26, 26)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(10, 10, 10))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    private void clearForm() {
        cmbChambre.setSelectedItem("");
        cmbIDClient.setSelectedItem("");
        txtDD.setText("");
        txtDF.setText("");
    }

    private boolean isRoomEnough(int idChambre, int value) {
        Connection conn = null;
        PreparedStatement pst = null;
        ResultSet rs = null;
        boolean isEnough = false;

        try {
            // 1. Get database connection
            conn = ConnectionProvider.getCon();

            // 2. Prepare SQL query to get room capacity
            String query = "SELECT CAPACITE FROM chambre WHERE ID_CHAMBRE = ?";
            pst = conn.prepareStatement(query);
            pst.setInt(1, idChambre);

            // 3. Execute query
            rs = pst.executeQuery();

            // 4. Check if room exists and has enough capacity
            if (rs.next()) {
                int roomCapacity = rs.getInt("CAPACITE");
                isEnough = (roomCapacity >= value);
            }

        } catch (SQLException e) {
            e.printStackTrace();
            // Consider returning false or throwing exception if DB error occurs
        } finally {
            // 5. Close resources
            try {
                if (rs != null) {
                    rs.close();
                }
                if (pst != null) {
                    pst.close();
                }
                if (conn != null) {
                    conn.close();
                }
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
        }

        return isEnough;
    }

    private boolean isRoomAvailable(int idChambre, String dateDebut, String dateFin) {
        boolean available = true;
        Connection conn = null;
        PreparedStatement pst = null;
        ResultSet rs = null;

        try {
            // Establish database connection
            conn = ConnectionProvider.getCon();
            // SQL query to check if the room is booked during the given period
            String query = "SELECT 1 FROM reservation WHERE ID_CHAMBRE = ? "
                    + "AND ((DATE_DEBUT <= ? AND DATE_FIN >= ?) " // Overlap condition 1
                    + "OR (DATE_DEBUT >= ? AND DATE_DEBUT <= ?) " // Overlap condition 2
                    + "OR (DATE_FIN >= ? AND DATE_FIN <= ?))";     // Overlap condition 3

            pst = conn.prepareStatement(query);
            pst.setInt(1, idChambre);
            pst.setDate(2, Date.valueOf(dateFin));     // First condition end date
            pst.setDate(3, Date.valueOf(dateDebut));  // First condition start date
            pst.setDate(4, Date.valueOf(dateDebut));  // Second condition start date
            pst.setDate(5, Date.valueOf(dateFin));    // Second condition end date
            pst.setDate(6, Date.valueOf(dateDebut));  // Third condition start date
            pst.setDate(7, Date.valueOf(dateFin));    // Third condition end date

            rs = pst.executeQuery();

            // If the query returns a result, the room is not available
            if (rs.next()) {
                available = false;
            }

        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            // Close resources
            try {
                if (rs != null) {
                    rs.close();
                }
                if (pst != null) {
                    pst.close();
                }
                if (conn != null) {
                    conn.close();
                }
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
        }

        return available;
    }


    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
        // TODO add your handling code here:
        /* try {
            Connection con = ConnectionProvider.getCon();
            Statement st = con.createStatement();
            ResultSet rs = st.executeQuery("select * from chambre");
            DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
            model.setRowCount(0);
            while (rs.next()) {
                model.addRow(new Object[]{rs.getString(1), rs.getString(2), rs.getString(3), rs.getString(4), rs.getString(5)});
            }
            rs.close();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }*/
    }//GEN-LAST:event_formComponentShown

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        try {
            // Contrôles de saisie
            if (txtDD1.getText().isEmpty() || txtDF1.getText().isEmpty()) {
                JOptionPane.showMessageDialog(this, "Veuillez saisir les dates de début et de fin");
                return;
            }

            if (nb_pers.getValue() == null) {
                JOptionPane.showMessageDialog(this, "Veuillez saisir le nombre de personnes");
                return;
            }

            // Conversion et validation des dates
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
            sdf.setLenient(false); // Pour une validation stricte des dates

            java.util.Date dateDebut, dateFin;
            try {
                dateDebut = sdf.parse(txtDD1.getText());
                dateFin = sdf.parse(txtDF1.getText());
            } catch (ParseException e) {
                JOptionPane.showMessageDialog(this, "Format de date invalide! Utilisez le format AAAA-MM-JJ");
                return;
            }

            // Vérification que la date de fin est après la date de début
            if (dateFin.before(dateDebut)) {
                JOptionPane.showMessageDialog(this, "La date de fin doit être postérieure à la date de début");
                return;
            }

            // Vérification du nombre de personnes
            int nbPersonnes;
            try {
                nbPersonnes = Integer.parseInt(nb_pers.getValue().toString());
                if (nbPersonnes <= 0) {
                    JOptionPane.showMessageDialog(this, "Le nombre de personnes doit être supérieur à 0");
                    return;
                }
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(this, "Nombre de personnes invalides");
                return;
            }

            // Connexion et appel de la fonction PL/SQL
            Connection con = ConnectionProvider.getCon();
            CallableStatement cst = con.prepareCall("{? = call chambres_disponibles(?, ?, ?)}");

            cst.registerOutParameter(1, OracleTypes.CURSOR);
            cst.setDate(2, new java.sql.Date(dateDebut.getTime()));
            cst.setDate(3, new java.sql.Date(dateFin.getTime()));
            cst.setInt(4, nbPersonnes);
            
            cst.execute();

            ResultSet rst = (ResultSet) cst.getObject(1);

            cmbChambre.removeAllItems();
            cmbChambre.addItem("-- Select Room --");

            ResultSetMetaData metaData = rst.getMetaData();
            int columnCount = metaData.getColumnCount();
            DefaultTableModel model = (DefaultTableModel) chambres.getModel();
            model.setRowCount(0);
            int rowcount = 0;

            while (rst.next()) {
                Object[] rowData = new Object[columnCount];
                for (int i = 1; i <= columnCount; i++) {
                    rowData[i - 1] = rst.getObject(i);
                }
                cmbChambre.addItem(rst.getString("ID_CHAMBRE"));
                model.addRow(rowData);
                rowcount++;
            }

            if (rowcount == 0) {
                JOptionPane.showMessageDialog(this, "Aucune chambre disponible pour ces dates et cette capacité");
            }

            rst.close();
            cst.close();
            con.close();

        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Erreur de connexion à la base de données !");
        }
    }//GEN-LAST:event_jButton8ActionPerformed

    private void jTable3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable3MouseClicked
        // TODO add your handling code here:
        DefaultTableModel model = (DefaultTableModel) jTable3.getModel();
        String IDClient = model.getValueAt(jTable3.getSelectedRow(), 0).toString();
        cmbIDClient.setSelectedItem(IDClient);
    }//GEN-LAST:event_jTable3MouseClicked

    private void jTable3ComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_jTable3ComponentShown
        // TODO add your handling code here:
    }//GEN-LAST:event_jTable3ComponentShown

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        // Get input values
        try {
            // Validate client selection
            if (cmbIDClient.getSelectedItem() == null || cmbIDClient.getSelectedItem().toString().isEmpty()) {
                JOptionPane.showMessageDialog(this, "Veuillez sélectionner un client", "Erreur", JOptionPane.WARNING_MESSAGE);
                return;
            }

            // Validate room selection
            if (cmbChambre.getSelectedItem() == null || cmbChambre.getSelectedItem().toString().isEmpty()) {
                JOptionPane.showMessageDialog(this, "Veuillez sélectionner une chambre", "Erreur", JOptionPane.WARNING_MESSAGE);
                return;
            }

            // Get client ID from the text field (already populated when client was selected)
            int clientId = Integer.parseInt(cmbIDClient.getSelectedItem().toString());

            // Get room ID - we need to get it from the database based on the selected description
            int roomId = Integer.parseInt(cmbChambre.getSelectedItem().toString());
            if (roomId == -1) {
                JOptionPane.showMessageDialog(this, "Chambre invalide", "Erreur", JOptionPane.ERROR_MESSAGE);
                return;
            }

            String checkInStr, checkOutStr;
            Date checkIn = null, checkOut = null;

            try {
                checkInStr = txtDD.getText();
                checkOutStr = txtDF.getText();

                // Convert String to Date object for validation
                checkIn = Date.valueOf(checkInStr);
                checkOut = Date.valueOf(checkOutStr);

                // Check if end date is after start date
                if (!checkOut.after(checkIn)) {
                    JOptionPane.showMessageDialog(this, "La date de fin doit être après la date de début",
                            "Erreur de dates", JOptionPane.WARNING_MESSAGE);
                    return;
                }

                // Check if dates are in the future
                Date today = new Date(System.currentTimeMillis());
                if (!checkIn.after(today)) {
                    JOptionPane.showMessageDialog(this, "La date de début doit être dans le futur",
                            "Erreur de date", JOptionPane.WARNING_MESSAGE);
                    return;
                }

                // Get room ID
                int idChambre = Integer.parseInt(cmbChambre.getSelectedItem().toString());

                // Check room availability
                if (isRoomAvailable(idChambre, checkInStr, checkOutStr)) {
                    JOptionPane.showMessageDialog(this, "La chambre est disponible !", "Disponibilité", JOptionPane.INFORMATION_MESSAGE);
                } else {
                    JOptionPane.showMessageDialog(this, "La chambre est déjà réservée pour cette période.",
                            "Indisponible", JOptionPane.WARNING_MESSAGE);
                    return;
                }

            } catch (IllegalArgumentException e) {
                JOptionPane.showMessageDialog(this, "Format de date invalide (utilisez AAAA-MM-JJ)",
                        "Erreur de format", JOptionPane.WARNING_MESSAGE);
            }

            // Insert reservation
            try (Connection con = ConnectionProvider.getCon(); PreparedStatement ps = con.prepareStatement(
                    "INSERT INTO reservation (id_client, id_chambre, date_debut, date_fin) VALUES (?, ?, ?, ?)")) {

                ps.setInt(1, clientId);
                ps.setInt(2, roomId);
                ps.setDate(3, checkIn);
                ps.setDate(4, checkOut);

                int rows = ps.executeUpdate();
                if (rows > 0) {
                    JOptionPane.showMessageDialog(this, "Réservation ajoutée avec succès",
                            "Succès", JOptionPane.INFORMATION_MESSAGE);

                    clearForm();
                }
            }
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "ID client invalide", "Erreur", JOptionPane.ERROR_MESSAGE);
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Erreur de base de données: " + e.getMessage(),
                    "Erreur SQL", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Erreur inattendue: " + e.getMessage(),
                    "Erreur", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
        new Consulter_Reservation().setVisible(true);
    }//GEN-LAST:event_jButton9ActionPerformed

    private void chambresMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_chambresMouseClicked
        DefaultTableModel model = (DefaultTableModel) chambres.getModel();
        String IDClient = model.getValueAt(chambres.getSelectedRow(), 0).toString();
        cmbChambre.setSelectedItem(IDClient);
    }//GEN-LAST:event_chambresMouseClicked

    private void cmbIDClientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbIDClientActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbIDClientActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Add_reservation.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Add_reservation.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Add_reservation.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Add_reservation.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Add_reservation().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable chambres;
    private javax.swing.JComboBox<String> cmbChambre;
    private javax.swing.JComboBox<String> cmbIDClient;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JTable jTable3;
    private javax.swing.JSpinner nb_pers;
    private javax.swing.JTextField txtDD;
    private javax.swing.JTextField txtDD1;
    private javax.swing.JTextField txtDF;
    private javax.swing.JTextField txtDF1;
    // End of variables declaration//GEN-END:variables
}
