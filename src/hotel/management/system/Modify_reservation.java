package hotel.management.system;

import dao.ConnectionProvider;
import javax.swing.JOptionPane;
import java.sql.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ListSelectionModel;
import javax.swing.table.DefaultTableModel;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
/**
 *
 * @author Toshiba
 */
public class Modify_reservation extends javax.swing.JFrame {

    /**
     * Creates new form ManageRoom
     */
    public Modify_reservation() {
        initComponents();
        setLocationRelativeTo(null);
        init_IDClients();
        init_Rooms();
        loadReservations();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    private void init_IDClients() {
        try {
            Connection con = ConnectionProvider.getCon();
            Statement st = con.createStatement();
            ResultSet rs = st.executeQuery("SELECT id_client FROM client");

            cmbIDClient.removeAllItems(); // Clear existing items
            cmbIDClient.addItem("            -- Select Client --"); // Default item

            while (rs.next()) {
                cmbIDClient.addItem(rs.getString("id_client"));
            }

            con.close();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error loading clients: " + e.getMessage());
        }
    }


    private void loadReservations() {
        try {
            Connection con = ConnectionProvider.getCon();
            Statement st = con.createStatement();
            ResultSet rs = st.executeQuery("SELECT * FROM reservation");
            DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
            model.setRowCount(0);

            while (rs.next()) {
                // Format Date_Début (remove time if present)
                String dateDebut = rs.getString(4);
                if (dateDebut != null && dateDebut.contains(" ")) {
                    dateDebut = dateDebut.split(" ")[0];
                }

                // Format Date_Fin (remove time if present)
                String dateFin = rs.getString(5);
                if (dateFin != null && dateFin.contains(" ")) {
                    dateFin = dateFin.split(" ")[0];
                }

                model.addRow(new Object[]{
                    rs.getString(1), // ID_Réservation
                    rs.getString(2), // ID_Chambre
                    rs.getString(3), // ID_Client
                    dateDebut, // Formatted Date_Début (YYYY-MM-DD)
                    dateFin // Formatted Date_Fin (YYYY-MM-DD)
                });
            }
            rs.close();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }
    }

    private void init_Rooms() {
        try {
            Connection con = ConnectionProvider.getCon();
            Statement st = con.createStatement();
            ResultSet rs = st.executeQuery("SELECT id_chambre FROM chambre");

            cmbChambre.removeAllItems(); // Clear existing items
            cmbChambre.addItem("            -- Select Room --"); // Default item

            while (rs.next()) {
                cmbChambre.addItem(rs.getString("id_chambre"));
            }

            con.close();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error loading rooms: " + e.getMessage());
        }
    }
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        txtDD = new javax.swing.JTextField();
        cmbChambre = new javax.swing.JComboBox<>();
        jButton5 = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        cmbIDClient = new javax.swing.JComboBox<>();
        txtDF = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        close = new javax.swing.JLabel();
        maximize = new javax.swing.JLabel();
        minimize = new javax.swing.JLabel();
        jButton6 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setUndecorated(true);
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });

        jLabel1.setText("Chambre");

        jLabel2.setText("ID_Client");

        jLabel3.setText("Date_Début");

        jButton5.setText("consulter la table client");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jLabel4.setText("Date_FIn");

        cmbIDClient.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "--------------Select Client----------" }));

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "ID_Résérvation", "ID_Chambre", "ID_Client", "Date_Début", "Date_Fin"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jTable1.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                jTable1ComponentShown(evt);
            }
        });
        jScrollPane2.setViewportView(jTable1);

        close.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/close.png"))); // NOI18N
        close.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                closeMouseClicked(evt);
            }
        });

        maximize.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/maximize.png"))); // NOI18N
        maximize.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                maximizeMouseClicked(evt);
            }
        });

        minimize.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/minimize.png"))); // NOI18N
        minimize.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                minimizeMouseClicked(evt);
            }
        });

        jButton6.setText("consulter la table chambre");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jButton7.setText("Update");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        jButton2.setText("Refresh");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 439, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jButton2)
                        .addGap(103, 103, 103)
                        .addComponent(jButton7, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(1, 1, 1)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2))
                        .addGap(24, 24, 24)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(cmbIDClient, 0, 229, Short.MAX_VALUE)
                            .addComponent(cmbChambre, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(jLabel3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtDD, javax.swing.GroupLayout.DEFAULT_SIZE, 226, Short.MAX_VALUE)
                            .addComponent(txtDF)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(jButton5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jButton6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(0, 0, Short.MAX_VALUE)))))
                .addGap(35, 35, 35))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(724, Short.MAX_VALUE)
                .addComponent(minimize)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(maximize)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(close)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(close)
                    .addComponent(maximize)
                    .addComponent(minimize))
                .addGap(16, 16, 16)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(cmbChambre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(48, 48, 48)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cmbIDClient, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2))
                        .addGap(47, 47, 47)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(txtDD, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(41, 41, 41)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(txtDF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 235, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton7, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton2))))
                .addContainerGap(49, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    private void clearForm() {
        cmbChambre.setSelectedItem("");
        cmbIDClient.setSelectedItem("");
        txtDD.setText("");
        txtDF.setText("");
    }

    private boolean isRoomEnough(int idChambre, int value) {
    Connection conn = null;
    PreparedStatement pst = null;
    ResultSet rs = null;
    boolean isEnough = false;
    
    try {
        // 1. Get database connection
        conn = ConnectionProvider.getCon();
        
        // 2. Prepare SQL query to get room capacity
        String query = "SELECT CAPACITE FROM chambre WHERE ID_CHAMBRE = ?";
        pst = conn.prepareStatement(query);
        pst.setInt(1, idChambre);
        
        // 3. Execute query
        rs = pst.executeQuery();
        
        // 4. Check if room exists and has enough capacity
        if (rs.next()) {
            int roomCapacity = rs.getInt("CAPACITE");
            isEnough = (roomCapacity >= value);
        }
        
    } catch (SQLException e) {
        e.printStackTrace();
        // Consider returning false or throwing exception if DB error occurs
    } finally {
        // 5. Close resources
        try {
            if (rs != null) rs.close();
            if (pst != null) pst.close();
            if (conn != null) conn.close();
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
    }
    
    return isEnough;
}

    private boolean isRoomAvailable(int idChambre, String dateDebut, String dateFin) {
        boolean available = true;
        Connection conn = null;
        PreparedStatement pst = null;
        ResultSet rs = null;

        try {
            // Establish database connection
            conn = ConnectionProvider.getCon();
            // SQL query to check if the room is booked during the given period
            String query = "SELECT 1 FROM reservation WHERE ID_CHAMBRE = ? "
                    + "AND ((DATE_DEBUT <= ? AND DATE_FIN >= ?) " // Overlap condition 1
                    + "OR (DATE_DEBUT >= ? AND DATE_DEBUT <= ?) " // Overlap condition 2
                    + "OR (DATE_FIN >= ? AND DATE_FIN <= ?))"
                    + "AND id_reservation!=? ";     // Overlap condition 3

            pst = conn.prepareStatement(query);
            pst.setInt(1, idChambre);
            pst.setDate(2, Date.valueOf(dateFin));     // First condition end date
            pst.setDate(3, Date.valueOf(dateDebut));  // First condition start date
            pst.setDate(4, Date.valueOf(dateDebut));  // Second condition start date
            pst.setDate(5, Date.valueOf(dateFin));    // Second condition end date
            pst.setDate(6, Date.valueOf(dateDebut));  // Third condition start date
            pst.setDate(7, Date.valueOf(dateFin));    // Third condition end date
            int s=Integer.parseInt(jTable1.getValueAt(jTable1.getSelectedRow(),0).toString());
            pst.setInt(8,s);
            rs = pst.executeQuery();

            // If the query returns a result, the room is not available
            if (rs.next()) {
                available = false;
            }

        } catch (SQLException e) {
            //e.printStackTrace();
        } finally {
            // Close resources
            try {
                if (rs != null) {
                    rs.close();
                }
                if (pst != null) {
                    pst.close();
                }
                if (conn != null) {
                    conn.close();
                }
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
        }

        return available;
    }


    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
        // TODO add your handling code here:
        /* try {
            Connection con = ConnectionProvider.getCon();
            Statement st = con.createStatement();
            ResultSet rs = st.executeQuery("select * from chambre");
            DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
            model.setRowCount(0);
            while (rs.next()) {
                model.addRow(new Object[]{rs.getString(1), rs.getString(2), rs.getString(3), rs.getString(4), rs.getString(5)});
            }
            rs.close();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }*/
    }//GEN-LAST:event_formComponentShown

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
       new Consulter_client().setVisible(true);

    }//GEN-LAST:event_jButton5ActionPerformed

    private void jTable1ComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_jTable1ComponentShown
        // TODO add your handling code here:
        loadReservations();
    }//GEN-LAST:event_jTable1ComponentShown

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        // TODO add your handling code here:
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        String IDChambre = model.getValueAt(jTable1.getSelectedRow(), 1).toString();
        String IDClient = model.getValueAt(jTable1.getSelectedRow(), 2).toString();
        String DD = model.getValueAt(jTable1.getSelectedRow(), 3).toString();
        String DF = model.getValueAt(jTable1.getSelectedRow(), 4).toString();

        cmbChambre.setSelectedItem(IDChambre);
        cmbIDClient.setSelectedItem(IDClient);
        txtDD.setText(DD);
        txtDF.setText(DF);
    }//GEN-LAST:event_jTable1MouseClicked

    private void closeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_closeMouseClicked
        // TODO add your handling code here:
        int confirm = JOptionPane.showConfirmDialog(
                null,
                "Are you sure you want to close this window?", null,
                JOptionPane.YES_NO_OPTION // Fixed typo: OPTION (was OPTION)
        );
        if (confirm == JOptionPane.YES_OPTION) {
            this.dispose();
        }
    }//GEN-LAST:event_closeMouseClicked

    private void maximizeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_maximizeMouseClicked
        // TODO add your handling code here:
        if (this.getExtendedState() == this.MAXIMIZED_BOTH) {
            // If currently maximized, restore to normal
            this.setExtendedState(this.NORMAL);
        } else {
            // If not maximized, maximize the window
            this.setExtendedState(this.MAXIMIZED_BOTH);
        }
    }//GEN-LAST:event_maximizeMouseClicked

    private void minimizeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_minimizeMouseClicked
        // TODO add your handling code here:
        this.setState(this.ICONIFIED);
    }//GEN-LAST:event_minimizeMouseClicked

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        new Consulter_chambre().setVisible(true);
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
  // TODO add your handling code here:
  
    
            String checkInStr, checkOutStr;
            Date checkIn = null, checkOut = null;


            checkInStr = txtDD.getText();
            checkOutStr = txtDF.getText();

            // Convert String to Date object for validation
            checkIn = Date.valueOf(checkInStr);
            checkOut = Date.valueOf(checkOutStr);

            // Check if end date is after start date
            if (!checkOut.after(checkIn)) {
                JOptionPane.showMessageDialog(this, "La date de fin doit être après la date de début",
                    "Erreur de dates", JOptionPane.WARNING_MESSAGE);
                return;
            }

            // Check if dates are in the future
            Date today = new Date(System.currentTimeMillis());
            if (!checkIn.after(today)) {
                JOptionPane.showMessageDialog(this, "La date de début doit être dans le futur",
                    "Erreur de date", JOptionPane.WARNING_MESSAGE);
                return;
            }

            // Get room ID
            int idChambre = Integer.parseInt(cmbChambre.getSelectedItem().toString());



            // Check room availability
            if (isRoomAvailable(idChambre, checkInStr, checkOutStr)) {
                JOptionPane.showMessageDialog(this, "La chambre est disponible !", "Disponibilité", JOptionPane.INFORMATION_MESSAGE);
            } else {
                JOptionPane.showMessageDialog(this, "La chambre est déjà réservée pour cette période.",
                    "Indisponible", JOptionPane.WARNING_MESSAGE);
                return;
            }

        int selectedRow = jTable1.getSelectedRow();

        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(null, "Please select a row to update");
        }
        Object idValue = jTable1.getValueAt(selectedRow, 0);

        // Cast to appropriate type (int, String etc.)
        int id = Integer.parseInt(idValue.toString());

        int confirm = JOptionPane.showConfirmDialog(
                null,
                "Are you sure you want to update this record?",
                "Confirm update",
                JOptionPane.YES_NO_OPTION // Fixed typo: OPTION (was OPTION)
        );
        if (confirm == JOptionPane.YES_OPTION) {
            try {
                String id_chambre = cmbChambre.getSelectedItem().toString();
                String clientId = cmbIDClient.getSelectedItem().toString();
                String startDate = txtDD.getText();
                String endDate = txtDF.getText();
                Connection con = ConnectionProvider.getCon();
                PreparedStatement st = con.prepareStatement("UPDATE reservation SET id_chambre = ?, id_client = ?,date_debut = ?,date_fin=? WHERE id_reservation=?");
                st.setString(1, id_chambre);
                st.setString(2, clientId);
                st.setDate(3, Date.valueOf(startDate));
                st.setDate(4, Date.valueOf(endDate));
                st.setInt(5, id);
                int rowsAffected = st.executeUpdate();
                if (rowsAffected > 0) {
                    JOptionPane.showMessageDialog(null, "Record updated successfully");
                    loadReservations();
                } else {
                    JOptionPane.showMessageDialog(null, "No record was updated");
                }
                
                cmbChambre.setSelectedItem(-1);
                cmbIDClient.setSelectedItem(-1);
                txtDD.setText("");
                txtDF.setText("");
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(null, "Error updating record: " + ex.getMessage());
                ex.printStackTrace();
            }
        }
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        setVisible(false);
        new Modify_reservation().setVisible(true);
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Modify_reservation.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Modify_reservation.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Modify_reservation.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Modify_reservation.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Modify_reservation().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel close;
    private javax.swing.JComboBox<String> cmbChambre;
    private javax.swing.JComboBox<String> cmbIDClient;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JLabel maximize;
    private javax.swing.JLabel minimize;
    private javax.swing.JTextField txtDD;
    private javax.swing.JTextField txtDF;
    // End of variables declaration//GEN-END:variables
}
